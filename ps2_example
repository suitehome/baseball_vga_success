`timescale 1ns / 1ps



module ps2_example (
	input         clk,
	input         rst,
	input         ps2clk,
	input         ps2data,
	input         set_num1,set_num2,guess_num1,guess_num2,
	input         SW0,SW1,
	output [6:0] sseg,
	
	output        ssDP,
	output [7:0] AN,
	output LED16_B,
	output LED16_G,
    output VGA_HS,       // to VGA connector
    output VGA_VS,       // to VGA connector
    output [11:0] vga  
	);
		

  
     wire [11:0]guess_num_p1,guess_num_p2,num_p1,num_p2;
     wire [11:0] input_number;


     wire [12:0]keycode;
     wire [3:0] digit_check_copy;
     wire check;
     wire [3:0]output_number;
     wire [3:0] check_cnt;
     wire [1:0]winner;
     wire [7:0] scancode;
    wire err_ind;
    wire clk_50;
    wire clk_100;
    wire Released;
    wire [3:0]cs_out;
  
    wire enter;
    wire [1:0]success;
    wire sig_num1,sig_num2,sig_gnum1,sig_gnum2;
    wire [1:0]input_sig;
    wire guess_mode;
    wire [1:0] strike, ball;
    wire button_released_p1;
    wire button_released_p2;
    reg button_d_1,button_s_1,button_d_2,button_s_2;
    reg [2:0]button_cnt_p1,button_cnt_p2;
   
    wire [7:0]ascii_char;
    wire hint_p1, hint_p2;
    reg hint_cnt;
    assign guess_mode = SW0;
     assign LED16_B = (winner==2'b01);// winner = 1
     assign LED16_G = (winner==2'b10) ; //winner = 2
    //assign success_result = success;
 
    //start start (.clk(clk), .rst(rst), .pageout(page));
assign input_sig = sig_num1+2*sig_num2;
assign enter =  sig_num1|sig_num2; 

assign button_released_p1 = (~button_d_1) &&( button_s_1) ;
assign button_released_p2 = (~button_d_2) && (button_s_2) ;


always@(posedge clk )
    if(rst) begin
        button_d_1 <= 1'b0;
        button_d_2 <= 1'b0;
        button_s_1 <= 1'b0;
        button_s_2 <= 1'b0;
       end
    else  begin
        button_d_1 <=  (input_sig == 2'b01) && guess_mode ;
        button_d_2 <=  (input_sig == 2'b10) && guess_mode ;
        button_s_1 <= button_d_1;
        button_s_2 <= button_d_2;
        end

always@(posedge clk, posedge rst)   //추측하기 버튼이 눌린 횟수
    if(rst) begin 
        button_cnt_p1 = 0;
        button_cnt_p2 = 0; end
    else if(button_released_p1) begin 
        button_cnt_p1 = button_cnt_p1 + 1;
        button_cnt_p2 = button_cnt_p2 ;
    end 
    else if(button_released_p2) begin 
        button_cnt_p1 = button_cnt_p1;
        button_cnt_p2 = button_cnt_p2+1 ;
        end 
        
        
debounce_sync d1( .clk(clk), .ext_in(set_num1),  .sig (sig_num1));
debounce_sync d2( .clk(clk), .ext_in(set_num2),  .sig (sig_num2));
debounce_sync d3( .clk(clk), .ext_in(guess_num1),  .sig (sig_gnum1));
debounce_sync d4( .clk(clk), .ext_in(guess_num2),  .sig (sig_gnum2));


  
    set_number set_number(.clk(clk),.rst(rst),.enter(enter), .guess_mode(guess_mode),  .input_sig(input_sig),.scancode(scancode), 
      .success(success), .cs_out(cs_out), .winner(winner));
    /*;
     controller u0(
    .clk(clk),.rst(rst),
    .input_number(input_number),
    .turn(turn),.turn_end(turn_end),
    .g_num1(g_num1),.g_num2(g_num2),.num_p1(num_p1),.num_p2(num_p2)
    );
    */
    datapath u1(.clk(clk), .rst(rst),.input_sig(input_sig), .guess_mode(guess_mode),.button_cnt(button_cnt),.input_number(keycode), 
    .ascii_char(ascii_char), .button_released_p1(button_released_p1), .button_released_p2(button_released_p2), 
    .success(success),.output_number(output_number), .num_p1(num_p1), .num_p2(num_p2),
    .strike(strike), .ball(ball) , .hint_p1(hint_p1) , .hint_p2(hint_p2)

    
    );
     




clk_wiz_0 clk_core
  (
  // Clock in ports
   .clk_in1(clk),      // input clk_in1
   // Clock out ports
   .clk_out1(clk_100),     // output clk_out1
   .clk_out2(clk_50),     // output clk_out2
   // Status and control signals
   .reset(rst), // input reset
   .locked()  );      // output locked

  
  
ps2_kbd_top ps2_kbd (
    .clk(clk_50), 
    .rst(rst), 
    .ps2clk(ps2clk), 
    .ps2data(ps2data), 
    .scancode(scancode), 
    .Released(Released), 
    .err_ind(err_ind),
    .keycode(keycode),
    
    .got_release(got_release)
    
    );
	     wire [9:0] w_x, w_y;
    wire w_video_on, w_p_tick;
    reg [11:0] rgb_reg;
    wire [11:0] rgb_next;
ascii_test a1(.clk(clk),.video_on(w_video_on),.x(w_x), .y(w_y), .input_number(output_number),
//.num_p1(num_p1),.num_p2(num_p2),     
.ball(ball), .strike(strike), .button_cnt_p1(button_cnt_p1), .button_cnt_p2(button_cnt_p2),
.hint_p1(hint_p1),.hint_p2(hint_p2),
.ascii_char_out(ascii_char), .rgb(rgb_next));

   vga_controller vga1(.clk_100MHz(clk), .reset(rst), .hsync(VGA_HS), .vsync(VGA_VS),
                       .video_on(w_video_on), .p_tick(w_p_tick), .x(w_x), .y(w_y));
    // rgb buffer
    always @(posedge clk)
        if(w_p_tick)
            rgb_reg <= rgb_next;
            
    // output
    assign vga = rgb_reg;
      
wire [3:0]datass;
assign datass = SW1? button_cnt_p1: strike;
ss_drive ss_drive (
    .clk(clk_100), 
    .rst(rst), 
    .data7(cs_out), //{keycode[31],keycode[30],keycode[29],keycode[28]}
    .data6(num_p2[11:8]), 
    .data5(num_p2[7:4]), 
    .data4(num_p2[3:0]), 
    .data3(datass), 
    .data2(num_p1[11:8]), //123 312
    
   
.data1(num_p1[7:4]), 
    .data0(num_p1[3:0]), 
    .mask(8'b1111_1111), 
    .ssA(sseg[0]), 
   .ssB(sseg[1]), 
   .ssC(sseg[2]), 
   .ssD(sseg[3]), 
   .ssE(sseg[4]), 
   .ssF(sseg[5]), 
   
.ssG(sseg[6]), 
    .ssDP(ssDP), 
    .AN7(AN[7]), 
    .AN6(AN[6]), 
    .AN5(AN[5]), 
    .AN4(AN[4]),
    .AN3(AN[3]), 
    .AN2(AN[2]), 
    .AN1(AN[1]), 
    .AN0(AN[0])
    );
endmodule


